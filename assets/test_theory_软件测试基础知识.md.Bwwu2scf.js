import{_ as a,c as l,o as e,a4 as i}from"./chunks/framework.ObsCMCsf.js";const b=JSON.parse('{"title":"软件测试基础知识","description":"","frontmatter":{},"headers":[],"relativePath":"test/theory/软件测试基础知识.md","filePath":"test/theory/软件测试基础知识.md"}'),t={name:"test/theory/软件测试基础知识.md"},r=i('<h1 id="软件测试基础知识" tabindex="-1">软件测试基础知识 <a class="header-anchor" href="#软件测试基础知识" aria-label="Permalink to &quot;软件测试基础知识&quot;">​</a></h1><p>什么是软件测试？ 软件测试是一种系统性的活动，旨在评估软件产品的质量。其主要目的是发现软件中的缺陷和问题，确保软件在发布和使用时能够达到预期的质量标准。</p><p>软件测试的目的是? 1.验证软件实现与需求一致； 2.发现缺陷，提高质量； 3.评估质量（版本的质量情况，能否发布）</p><p>软件开发模式: 瀑布、敏捷、DevOps</p><h2 id="测试流程-瀑布模式" tabindex="-1">测试流程(瀑布模式) <a class="header-anchor" href="#测试流程-瀑布模式" aria-label="Permalink to &quot;测试流程(瀑布模式)&quot;">​</a></h2><p>测试策略 - 测试设计 - 测试执行 - 测试评估</p><h3 id="测试策略" tabindex="-1">测试策略 <a class="header-anchor" href="#测试策略" aria-label="Permalink to &quot;测试策略&quot;">​</a></h3><p>5W1H法(Why,What,When,Where,Who,How)</p><p>1.分析需求 明确测试内容和目标，制定测试计划； 参与需求评审，减少设计阶段的缺陷；</p><h3 id="测试设计" tabindex="-1">测试设计 <a class="header-anchor" href="#测试设计" aria-label="Permalink to &quot;测试设计&quot;">​</a></h3><p>2.设计测试方案 根据需求设计测试方案，包括：</p><ul><li>测试环境:操作系统、数据库、组网结构；</li><li>测试工具；</li><li>测试功能点及场景；</li><li>是否需要性能测试、安全测试等；</li></ul><p>3.编写测试用例 根据测试方案的场景，编写具体可执行的用例；</p><p>测试用例:</p><ol><li>测试目的</li><li>预制条件</li><li>测试步骤</li><li>预期结果</li></ol><h3 id="测试执行" tabindex="-1">测试执行 <a class="header-anchor" href="#测试执行" aria-label="Permalink to &quot;测试执行&quot;">​</a></h3><p>4.迭代测试 发现的缺陷修复后重写出包，重复测试； 根据实际情况新增删减用例；</p><p>5.验收测试 最后一轮出包，用例全部通过； 性能测试、安全扫描通过； 产品文档资料等验证；</p><h3 id="测试评估" tabindex="-1">测试评估 <a class="header-anchor" href="#测试评估" aria-label="Permalink to &quot;测试评估&quot;">​</a></h3><p>6.测试报告 输出测试报告、性能测试报告、安全扫描结果等。</p><p>测试报告内容包括</p><ul><li>测试产品版本</li><li>测试环境信息</li><li>测试结论</li><li>关键风险</li><li>缺陷分析</li><li>覆盖率分析</li><li>遗留问题</li></ul><h2 id="测试分类" tabindex="-1">测试分类 <a class="header-anchor" href="#测试分类" aria-label="Permalink to &quot;测试分类&quot;">​</a></h2><p>按测试阶段分类: 单元测试-集成测试-系统测试-验收测试 按测试类型分类: 功能测试-性能测试-安全测试-可靠性测试等 按测试方法分类: 黑盒测试-白盒测试</p><h3 id="黑盒测试" tabindex="-1">黑盒测试 <a class="header-anchor" href="#黑盒测试" aria-label="Permalink to &quot;黑盒测试&quot;">​</a></h3><h4 id="_1-等价类划分" tabindex="-1">1.等价类划分 <a class="header-anchor" href="#_1-等价类划分" aria-label="Permalink to &quot;1.等价类划分&quot;">​</a></h4><p>有效等价类、无效等价类</p><h4 id="_2-边界值分析" tabindex="-1">2.边界值分析 <a class="header-anchor" href="#_2-边界值分析" aria-label="Permalink to &quot;2.边界值分析&quot;">​</a></h4><ul><li>上点：就是边界上的点，不管是开区间还是闭区间。</li><li>内点：就是在域范围内的任意一点。</li><li>离点：就是离上点最近的一个点。</li></ul><blockquote><p>如果边界是封闭的，那么离点就是域范围外离上点最近的点。例如取值范围闭区间`[2,8]，离点是1和9。 如果边界是开放的，那么离点就是域范围内离上点最近的点。例如取值范围开区间(2,8)，离点是3和7。</p></blockquote><h4 id="_3-场景分析法" tabindex="-1">3.场景分析法 <a class="header-anchor" href="#_3-场景分析法" aria-label="Permalink to &quot;3.场景分析法&quot;">​</a></h4><p>将场景一一拆分，逐条覆盖</p><h4 id="_4-因果图-判定表法" tabindex="-1">4.因果图-判定表法 <a class="header-anchor" href="#_4-因果图-判定表法" aria-label="Permalink to &quot;4.因果图-判定表法&quot;">​</a></h4><p>根据输入条件的组合与输入条件的相互制约关系。</p><ol><li>根据需求说明，分析因和果，画出因果图</li><li>将因果图转换为判定表</li><li>将判定表的每一列设计成一个测试用例</li></ol><h4 id="_5-正交实验设计法" tabindex="-1">5.正交实验设计法 <a class="header-anchor" href="#_5-正交实验设计法" aria-label="Permalink to &quot;5.正交实验设计法&quot;">​</a></h4><p>通过有限的测试用例覆盖尽可能多的软件功能和输入组合。</p><ol><li>确定因素和水平: 假设3个因素(A,B,C),每个因素有两个水平(1,2)</li><li>选择正交表: L4(23)正交表的含义是：4个测试用例可以覆盖所有3个因素的2个水平组合，确保每个因素的每个水平出现的次数相等</li><li>填写正交表: 每行记录就是一条测试用例</li></ol><h3 id="白盒测试" tabindex="-1">白盒测试 <a class="header-anchor" href="#白盒测试" aria-label="Permalink to &quot;白盒测试&quot;">​</a></h3><ol><li>语句覆盖 每个可执行语句至少被测试一次。</li><li>判定覆盖（分支覆盖） 每个判断语句的真假值至少被测试一次，即每个分支都要至少走一次。</li><li>条件覆盖（真假值覆盖） 判断语句中的每个条件的真假值至少被测试一次。</li><li>判定条件覆盖 判断语句中的每个条件的真假值至少被测试一次，同时，所有判断的可能结果至少执行一次。即条件覆盖+判定覆盖</li><li>条件组合覆盖 每个条件的各种组合至少被测试一次。</li><li>路径覆盖 覆盖程序中的所有可能的执行路径。</li></ol><h2 id="其他测试" tabindex="-1">其他测试 <a class="header-anchor" href="#其他测试" aria-label="Permalink to &quot;其他测试&quot;">​</a></h2><p>兼容性测试: 软件兼容、硬件兼容、内部兼容、外部兼容 可服务性测试: 可部署、可维护、易用性、全球化 资料测试: 一致性、易用性</p><hr><p>参考资料:</p><ol><li><a href="https://cloud.tencent.com/developer/article/2115001" target="_blank" rel="noreferrer">软件测试-因果图与判定表</a></li><li><a href="https://cloud.tencent.com/developer/article/1534183" target="_blank" rel="noreferrer">测试方法之正交试验法</a></li></ol>',45),o=[r];function h(n,d,c,p,s,_){return e(),l("div",null,o)}const q=a(t,[["render",h]]);export{b as __pageData,q as default};
